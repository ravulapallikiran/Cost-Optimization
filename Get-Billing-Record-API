const { CosmosClient } = require("@azure/cosmos");
const { BlobServiceClient } = require("@azure/storage-blob");
const config = require('../../shared/config');

module.exports = async function (context, req) {
  const id = req.params.id;
  const cosmos = new CosmosClient({ endpoint: config.cosmosDb.endpoint, key: config.cosmosDb.key });
  const container = cosmos.database(config.cosmosDb.databaseId).container(config.cosmosDb.containerId);

  try {
    const { resource } = await container.item(id, id).read();
    context.res = { status: 200, body: resource };
  } catch (err) {
    if (err.code !== 404) throw err;

    const blobSvc = BlobServiceClient.fromConnectionString(config.blob.connectionString);
    const containerClient = blobSvc.getContainerClient(config.blob.containerName);
    const blobName = `${id}.json`;
    const blobClient = containerClient.getBlockBlobClient(blobName);

    if (await blobClient.exists()) {
      const download = await blobClient.download(0);
      const downloaded = await streamToString(download.readableStreamBody);
      context.res = { status: 200, body: JSON.parse(downloaded) };
    } else {
      context.res = { status: 404, body: "Record not found." };
    }
  }
};

async function streamToString(stream) {
  return new Promise((resolve, reject) => {
    const chunks = [];
    stream.on("data", (chunk) => chunks.push(chunk.toString()));
    stream.on("end", () => resolve(chunks.join("")));
    stream.on("error", reject);
  });
}
